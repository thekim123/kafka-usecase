networks:
  kafka-network:
    name: kafka-network  # 네트워크 이름을 강제 지정
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: DI-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    volumes:
      - ./docker-data/zookeeper:/var/lib/zookeeper
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: DI-kafka-1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    volumes:
      - ./docker-data/kafka:/var/lib/kafka
    networks:
      - kafka-network

#
#  kafka-2:
#    image: confluentinc/cp-kafka:7.3.0
#    hostname: kafka-2
#    container_name: kafka-2
#    ports:
#      - "9093:9093"  # 새로운 포트 설정
#      - "29093:29093"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:29092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_BROKER_ID: 2  # 고유한 브로커 ID
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2  # 클러스터의 복제본 수
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#    depends_on:
#      - zookeeper
#    volumes:
#      - ./docker-data/kafka-2:/var/lib/kafka
#    networks:
#      - kafka-network


  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: DI-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - ./docker-data/schema-registry:/var/lib/schema-registry
    networks:
      - kafka-network

  postgresql:
    image: postgres:14
    container_name: DI-postgresql
    environment:
      POSTGRES_DB: "conduktor-console"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - ./docker-data/postgresql:/var/lib/postgresql/data
    networks:
      - kafka-network

  conduktor-console:
    image: conduktor/conduktor-console:1.26.0
    container_name: DI-conduktor-console
    depends_on:
      - postgresql
    ports:
      - "9080:8080"
    volumes:
      - ./docker-data/conduktor-console:/var/lib/conduktor-console
      - type: bind
        source: "./.config/platform-config.yml"
        target: /opt/conduktor/platform-config.yaml
        read_only: true
    environment:
      CDK_IN_CONF_FILE: /opt/conduktor/platform-config.yaml
    networks:
      - kafka-network

  conduktor-monitoring:
    container_name: DI-conduktor-monitoring
    image: conduktor/conduktor-console-cortex:1.26.0
    environment:
      CDK_CONSOLE-URL: "http://conduktor-console:9080"
    volumes:
      - ./docker-data/conduktor-monitoring:/var/lib/conduktor-monitoring
    networks:
      - kafka-network

  mariadb:
    image: mariadb:latest
    container_name: DI-mariadb
    restart: unless-stopped
    ports:
      - "3321:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: "namu-jwt-test"
      MYSQL_USER: "namu-jwt-test"
      MYSQL_PASSWORD: "1234"
    volumes:
      - ./docker-data/mariadb:/var/lib/mysql
    networks:
      - kafka-network

  redis:
    image: redis:latest
    container_name: DI-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./docker-data/redis:/data
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "1234"]
    networks:
      - kafka-network

  ## Spring Boot Application
  spring-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: DI-spring-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mariadb://mariadb:3306/namu-jwt-test
      SPRING_DATASOURCE_USERNAME: namu-jwt-test
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: 1234
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092
      MINIO_URL: minio:9000
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    depends_on:
      - mariadb
      - redis
      - kafka
      - minio
    volumes:
      - ./docker-data/spring-app:/var/lib/spring-app
    networks:
      - kafka-network

  ## MinIO 추가
  minio:
    image: quay.io/minio/minio
    container_name: DI-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    volumes:
      - ./docker-data/minio:/data
    command: server --console-address ":9001" /data
    networks:
      - kafka-network